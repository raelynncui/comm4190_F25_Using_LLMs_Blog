[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMM 4190 Blog",
    "section": "",
    "text": "Ralph Lauren’s New AI Shopping Assistant\n\n\n\nLLMs\n\nCopilot\n\nConversational AI\n\n\n\nTesting conversational AI on the Ralph Lauren app\n\n\n\n\n\nSep 17, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nCreating My Own AI Agent\n\n\n\nAgentic AI\n\n\n\nExploring agentic AI using Make\n\n\n\n\n\nSep 15, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nAnchoring Effects with LLMs\n\n\n\nChatGPT\n\nLLMs\n\nBias\n\n\n\nLike humans, do LLMs fall prey to cognitive biases?\n\n\n\n\n\nSep 14, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nHow Simple Can You Get?\n\n\n\nChatGPT\n\nLLMs\n\n\n\nAsking ChatGPT to simplify a concept down to its simplest form\n\n\n\n\n\nSep 12, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nEndless Image Replication\n\n\n\nChatGPT\n\nImage Generation\n\n\n\nWhat happens when you tell an image generation model to repeatedly replicate an image?\n\n\n\n\n\nSep 9, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nUI Vibe Coding\n\n\n\nVibe Coding\n\nChatGPT\n\nClaude\n\nLovable\n\nUI/UX\n\n\n\nComparing UI replication abilities across ChatGPT, Claude, and Lovable\n\n\n\n\n\nSep 7, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nLLM Sycophancy\n\n\n\nLLMs\n\nChatGPT\n\n\n\nWhen ChatGPT tells you what you want to hear\n\n\n\n\n\nSep 6, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nChatGPT as a Mock Interviewer\n\n\n\nLLMs\n\nChatGPT\n\nProfessional\n\n\n\nUsing AI to prepare for behavioral interviews\n\n\n\n\n\nSep 5, 2025\n\n\nRaelynn Cui\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/004_image_replication/post_4.html",
    "href": "posts/004_image_replication/post_4.html",
    "title": "Endless Image Replication",
    "section": "",
    "text": "Endless Image Replication\n\nContext\nIn this blog, I play around with OpenAI’s GPT-5 image generation capabilities. Beginning with a photo of my dog, I repeatedly give the prompt “create a replica of this image. don’t change a thing”, feeding the output of each iteration as the input of the next.\n\nI was inspired by this Reddit post, where a user shows how an image of a person became completely unrecognizable after the 74th iteration! My experiment didn’t go that far though, yielding different (and a little more underwhelming) results.\n\n\n\nResults\nI performed 11 iterations of the prompt using the GPT-5 model. Here’s an animation of my results:\n\nThe first iteration was extremely good – the original image is on the left and the output is on the right. I initially had high hopes, since there are no noticeable differences I can spot when seeing the images side by side.\n\n\n\n\n\n\n\n\n\n\nHowever, it went quickly downhill after that. The biggest jump seemed to be within the third and fourth images, where the fourth image suddenly gained lots of noise and a higher contrast/sharpness.\n\n\n\n\n\n\n\n\n\n\nAfter that, it seemed to hit a plateau where the image became black and white and extremely noisy, with the outline of my dog still slightly distinguishable. This was the final photo after 11 rounds:\n\n\n\n\n\nReflections\nI couldn’t find any detailed and definitive source online regarding how the GPT-5 model generates images, but I’m assuming what happened here is that some noise/mismatches got introduced at some stage, which then got amplified as the iterations continued. According to an article on The Verge, the GPT-4o model uses an autoregressive approach (not diffusion), where it generates an image token by token, just like text. Instead of starting with random noise, like with diffusion, it predicts a sequence of image tokens that make up the image. Because of this, I’m surprised that the model introduced so much static/noise and didn’t veer off the path like the Reddit example.\nIn fact, I even fed the final image into GPT-5 and asked if it could identify what it was. It said: “This is an image of a dog lying in the grass. The photo appears to have been processed with a strong filter or edge-detection effect, which makes it look like a high-contrast sketch or engraving. You can still make out the dog’s head, body, and the surrounding grass and trees in the background, though the details are stylized.” Therefore, it’s puzzling as to why it didn’t retain a more obvious “dog token” in its image generation process.\nTo push the model a bit further, I asked it to “generate an image of what you think the original photo looked like.” This was what it generated – pretty good!\n(From left to right: the original image, the final image, and the reconstructed image)"
  },
  {
    "objectID": "posts/007_agents/post_7.html",
    "href": "posts/007_agents/post_7.html",
    "title": "Creating My Own AI Agent",
    "section": "",
    "text": "Creating My Own AI Agent\n\n\nContext\nRecently, I’ve been curious about agentic AI – especially after seeing how companies like OpenAI and Salesforce are integrating these capabilities into their products. The whole idea felt a bit overwhelming at first, but I’ve learned that the best way for me to make sense of and get familiar with these technical concepts is just to dive in and play around with them.\nIn this blog post, I document my experience creating my own (very basic and simple) AI agent using Make, a site that allows you to visually create, build and automate workflows!\n\n\n\nWhat is agentic AI?\nAgentic AI is AI that is proactive – it has agency to perform tasks by planning, acting, and sometimes proactively deciding how to reach a goal across multiple steps or tools. Generative AI, on the other hand, is more reactive – it only responds to prompts given by the user.\nPutting things together in Make\nMy experiment was simple and straightforward – I wanted to pull in events from my Google Calendar, run them through AI to get notes on how I should prepare for these events, and save everything neatly into a Google Sheet.\nThe workflow was as follows: - Google Calendar = fetches my events - Make AI Toolkit = asks “what should I do to prepare for each event?” - Google Sheets = stores the answers\nMake makes this process simple and visually intuitive to understand. Each circle is a module, which can draw from a wide range of apps/formats/platforms like Google Drive, JSON, OpenAI, and so on. When you add a module, you may have to give permissions (such as permission for Make to access my Google Calendar) or enter API keys (such as if you were using the OpenAI module). Modules can then be linked together to form a flow!\n\nWhile the layout was extremely intuitive, I still ran into many issues throughout this process. For example, in one of my earlier iterations, I didn’t have the Google Sheets module and was attempting to get the output directly from the Make AI Toolkit.\nHowever, The way Make handles data means every calendar event comes in as a separate “bundle.” This meant I wasn’t getting one nice weekly checklist; rather, I was getting ten scattered AI outputs.\n\nSo, I consulted ChatGPT for help. I fed it an image of my workflow and had it suggest solutions for me to implement. It suggested either 1) using an aggregator component after the Google Calendar to collect all event details into a single text block or 2) adding another AI component to summarize the results into one output. I wasn’t able to get these recommendations to work, so I instead suggested adding a Google Sheet and asked ChatGPT where to go from there. From there, it was able to successfully instruct me how to configure this component to add each checklist as a row in a Google Sheet that lives in my personal Google Drive!\nI thought this part was pretty cool – I was using AI to help me build an AI agent.\n\n\n\nThe AI responses\nOverall, I thought the checklists that the AI generated were pretty good! It only had the title, time, and location of my Google Calendar events to work off of. This was the response it generated for my friend’s housewarming – it was able to identify that “Elli” in the title was refering to someone called Elli and also understood the conventions around housewarmings (buying a gift, a possible potluck, transportation, etc.).\n\n\n\nNext steps\nThis agent I created was extremely simple, so making it more complex could be a fun next project. I’m thinking about adding an AI module that parses the events, identifies ones that may require additional documents from Google Drive (notes, slideshows, etc.) or even makes them if necessary, and adds them to the spreadsheet as well!"
  },
  {
    "objectID": "posts/003_UI_vibe_coding/post_3.html",
    "href": "posts/003_UI_vibe_coding/post_3.html",
    "title": "UI Vibe Coding",
    "section": "",
    "text": "UI Vibe Coding\n\nContext\nIn the past, I’ve experimented a bit with vibe coding by having ChatGPT assist me with things like writing a script to automate the downloading of images from HTML, writing a script to parse through a JSON to extract certain fields, and writing a Python script to extract numerical data from a line graph image using edge detection software.\n\nVibe coding: an emerging software development approach in which a human developer directs an AI system through high-level, natural language instructions and iterative feedback, while the AI handles the generation, refinement, and debugging of the code..\n\nHowever, I’ve never used AI models to vibe code UIs! As a lover of UI/UX design, I’ve historically stuck to Figma to manually prototype my designs. In this blog post, I document my experience using three different AI tools to generate mockups of my Figma designs in HTML/CSS – Claude, ChatGPT, and Lovable! For this exercise, I’m not prompting these models to create functioning and clickable prototypes – just the UI.\n\n\n\nThe Prompt & Thinking\n\n\n\n\n\nMy Figma mockup\n\n\n\n\n\n\nLovable’s thinking\n\n\n\n\nFor each of the models, I prompted it to “replicate this mobile UI using html/css,” with this image my Figma mockup attached.\nThe models notably differed in how they responded to the prompts: - ChatGPT thought for 9 seconds, with one of its lines of reasoning being: “I’m planning to create a full HTML/CSS layout with a mobile-friendly design (390x844). It will have top tabs for”tasks” and “calendar” in pill shapes with navy and tan colors. The bottom bar will feature icons like emoji/SVG. For tasks, I’ll create cards with checkboxes, names, due dates, and avatars. We’ll use specific color variables like navy blue #2F3A8C and others for consistency in design.” - Lovable thought for 19 seconds, with an even more extensive line of reasoning (see photo above). I found that this more modular and detailed reasoning produced a significantly better outcome, which I describe in the next section.\n\n\n\nOutputs\n\nChatGPT\n\nOverall, ChatGPT’s output was pretty good. It captured the color scheme relatively well, but not perfectly (some inconsistencies with the horizontal bars). It also maintained the basic layout: tabs at the top, a horizontal navigation bar at the bottom, and horizontal bars with a checkable box and text. I found it interesting that it even replaced the avatar images with emojis that still resembled the people!\n\n\nClaude\n\nClaude’s output was also decent, but not as great as ChatGPT’s, in my opinion. The color scheme was not as accurate, but it did handle the shape of the top “tasks” and “calendar” tabs better than GPT. However, it added some features that weren’t present in the Figma mockup I provided – gradients behind the avatars and strikethroughs for the completed tasks.\n\n\nLovable\n\n\n\n\n\n\n\n\n\n\nLovable’s output was underwhelming at first – the color scheme looks different and the top tab navigation is off as well.\nHowever, when you interact with the prototype, it outperforms ChatGPT and Claude by far. Even though I didn’t prompt it to include these functionalities, it allows you to check (and uncheck!) tasks, toggle between the tasks and calendar page, and click the “add task” button.\n\n\n\nReflections\nFor UI accuracy (text, colors, layout), I think ChatGPT performed the best. However, for functionality, Lovable was superior, which is reflective of its much longer and more thorough “thinking” process. Whereas ChatGPT took 9 seconds to seemingly generate the prototype in one shot, Lovable took 19 seconds, working step by step through each component of the interface. Overall, I think this goes to show the importance of playing around with different models to determine which supports your needs the most! In the future, I think it would be interesting to play around with building a functioning app isntead of one static interface."
  },
  {
    "objectID": "posts/001_mock_interview/post_content.html",
    "href": "posts/001_mock_interview/post_content.html",
    "title": "ChatGPT as a Mock Interviewer",
    "section": "",
    "text": "ChatGPT as a Mock Interviewer\n\nContext\nOver the past few weeks, I’ve been preparing for upcoming internship interviews! Many people suggest mock interviewing with others, but I feel bad asking someone to listen to me talk for so long and subjecting them to my rambles. Not only that, but I’ve found that rehearsing answers and practicing “in my head” are completely ineffective – when someone asks me a question in real time, I freeze up and don’t know what to say.\nSo, I turned to ChatGPT as a prep partner, using it as a coach, mock interviewer, and critic!\n\n\n\nChatGPT voice feature\n\n\n\nI used ChatGPT across all areas of interview preparation: coming up with answers, verbally delivering the answers, and receiving feedback. This blog outlines how LLMs assisted me across all these stages!\n\n\n\nStage 1: Answers\nTo optimize the feedback that ChatGPT gave me on behavioral questions (“Tell me about a time when you led a team,” “Tell me about a time when you failed”), I needed to provide it with extensive context on my previous experiences. To do this, I uploaded two files to my project folder: 1) my resume and 2) a longer, more narrative-driven document, where I keep a running log of the details and lessons I’ve learned from my previous experiences.\nBy giving ChatGPT this context, I was even able to ask it to “read between the lines” my experiences to extract core themes that could be applied to any behavioral question. In fact, this was the most useful aspect of using an LLM to prepare for behavioral questions – with the right prompting, it could even point out patterns in my experiences that I hadn’t noticed before!\n\n\n\nContextual documents given to ChatGPT\n\n\n\n\nStage 2: Verbal Delivery\nTo practice verbally delivering my answers, I made use of ChatGPT’s voice feature. I provided it with a bank of questions and then prompted it to act like an interviewer and choose one at random. In this stage, it wasn’t much about what ChatGPT could say to me – it was most useful in creating a space to simulate the surprise of getting a question at random and having to answer it on the spot.\n\n\nStage 3: Feedback\nPrevious versions of ChatGPT (GPT-4o) have been accused of being too sycophantic – being overly flattering and agreeable to the user. While this attribute has been claimed to be addressed in the GPT-5 update, which is what I was using, I still always made sure to prompt the model to be “brutally honest.” Doing so forced the LLM to give more critical feedback on my response, which is where the real improvement in my responses was made! Additionally, prompting ChatGPT to “act as a product director” and “apply best frameworks and relevant practices” (since I was interviewing for product management roles) produced extremely good results.\n\n\n\nReflections\nUtilizing ChatGPT was an incredibly valuable part of my interview preparation. Psychologically, it was great to have a low-stakes and always readily available “interviewer” – when walking in between classes, I could simply pull out my phone and do a quick mock question. This experience has shown me the importance of 1) providing an LLM with the correct context and 2) crafting the correct prompts for my specific use case. If I hadn’t provided ChatGPT with the extensive accounts of my previous experiences (many of which I forget or can’t recall the details of off the top of my head), it would not have been able to provide as nuanced suggestions and revisions. Additionally, if I had not prompted it to be brutally honest, it may have only provided vapid and flattering feedback (which makes me feel good in the moment, but doesn’t help with improvement).\nAs I’m writing this, I actually just completed two interviews that I was using these methods with ChatGPT to prepare me for! Upon reflection, there was a sense of randomness and interviewer-dependent context that I couldn’t have prepared for with an LLM. For example, many questions were not framed in a way where I could immediately jump into a STAR framework response or a product design framework response. In this sense, ChatGPT turned out to be most helpful for extracting core themes from my experiences and being able to communicate these concisely with phrases that I could weave throughout my interview conversations."
  },
  {
    "objectID": "posts/006_bargaining/post_6.html",
    "href": "posts/006_bargaining/post_6.html",
    "title": "Anchoring Effects with LLMs",
    "section": "",
    "text": "Anchoring Effects with LLMs\n\nContext\nI’m currently taking MKTG 2120 (Data and Analysis for Marketing Decisions). During one of the first few classes this semester, my professor was talking about the use of LLMs to respond to user surveys – acting as “synthetic respondents.” She mentioned that, similar to humans, LLMs may also fall prey to certain biases that can be evoked in surveys. For example, if you asked a user the question “How would you rate the cleanliness of the store?” before you asked then “How would you rate your overall experience?”, their rating of the store cleanliness would weigh on their mind when determining their overall rating, biasing their response.\nI wanted to test this on my own and see if an LLM would show signs of cognitive biases that are usually associated with humans. I felt that this wasn’t a crazy hypothesis, since these LLMs are trained on data that also likely exhibit these effects.\nThe bias I chose to test was the anchoring effect. In psychology, anchoring describes how people’s judgments are swayed by the first piece of information they see. A classic example is: if you ask someone whether the Mississippi River is longer or shorter than 500 miles, then ask for their best guess, they’ll give a much lower estimate than if you anchor them with 5,000 miles. That first number, no matter how arbitrary, sticks in the mind and frames what feels “reasonable.”\nSo I set up a simple experiment with ChatGPT. I gave it the following prompt:\n\n\nYou are a potential buyer of a product and I am the seller. I’m selling a simple pencil for $X. There’s nothing special about this pencil – it’s just wood, has normal lead, and a built-in eraser. Do you accept my offer to buy it?\n\n\nIn the place of X, I experimented with three values: $20, $3, and $1.\n\n\nRound one: anchoring high\nI started high by proposing a cost of $20. The model immediately rejected the offer – it reasoned that pencils normally cost less than a dollar.\n\nWhen I dropped the price all the way down to $1, it accepted.\n\n\n\nRound two: anchoring lower\nThis time, I didn’t start at $20. I started at $3. Again, the model rejected the offer.\n\nBut, when I lowered the price to $1, (same product, same price as before) it actually said no. I’m hypothesizing that this is because I first proposed $3 instead of $20. Therefore, its perception of the cost of a pencil was lowered accordingly as well to about 25-50 cents, causing it to reject my offer of $1.\n\n\n\nRound three: no anchor\nIn this round, I proposed $1 off the bat to see how it would respond. This time, ChatGPT said yes.\n\n\n\nReflection\nThe underlying prompt (and therefore product) never changed – the only difference was the starting point. These prompts were also sent in different chats, meaning they couldn’t influence each other. At $20, it most likely made $1 felt like a bargain. However, when beginning $3, $1 most likely felt less impressive in comparison. Finally, with no anchor, $1 seemed fair.\nIn my opinion, this represents a sort of anchoring behavior. The model framed its reasoning around the first number I provided, which informed its later judgments and decision to purchase or reject the pencil. I wouldn’t go to say that its biased in the human sense, since the LLM doesn’t have self-interest or emotion. Instead, it seems like these biases could just be a product of the way LLMs function – basing its decisions on the previous statements of the conversation. That conversation history resembles the “anchor” – it’s the structure of dialogue with the LLM that nudges it in a certain direction. In other words, the nature of the interaction itself is the bias.\nOverall, I think this goes to show how chat history can have an impact on how the LLM responds. Each query sent to the LLM doesn’t exist in isolation; rather, previous messages and interactions also have weight. In this scenario, the same model judged the same final price extremely differently, depending only on where it started!"
  },
  {
    "objectID": "posts/005_simplification/post_5.html",
    "href": "posts/005_simplification/post_5.html",
    "title": "How Simple Can You Get?",
    "section": "",
    "text": "How Simple Can You Get?\n\nContext\nIn this experiment, I wanted to test what happens when you ask ChatGPT to explain a concept over and over, but each time demand that it make things even simpler by repeating the prompt:\n\n\n“I still don’t understand. Explain it even more simply”\n\n\nUltimately, I wanted to test how far ChatGPT would go. I predicted that eventually, the explanation of the concept would become simplified to a point where it became meaningless, since the LLM would be unable to deny the simplification request. For this experiment, I asked ChatGPT to explain a fairly common but often misunderstood topic: the cloud.\nI then repeated this experiment, but with a human – noting the differences in how humans interpret this simplicity threshold and how much nuance we’re willing to give up for the sake of simplicity when explaining something.\n\n\n\nRound 1\nAfter asking ChatGPT the first time to explain the cloud, it gave me a long and structured answer with 6 parts:\n\n\nAt a high level, “the cloud” just means computing resources (like storage, servers, databases, networking, and software) that are delivered over the internet instead of being tied to your own local computer or company server. Let me break it down step by step:\n\n\n\nPhysical Infrastructure\n\n\nEven though the cloud feels “invisible,” it’s built on huge data centers filled with powerful servers. These are maintained by companies like Amazon (AWS), Microsoft (Azure), Google Cloud, etc. Each data center has:\n\n\n\nServers: Machines that provide processing power and memory.\n\n\nStorage systems: Where files, databases, and backups live.\n\n\nNetworking equipment: Switches and routers that connect everything securely.\n\n\n\n\n\nVirtualization\n\n\nCloud providers don’t just hand you a whole physical server. Instead, they use virtualization:\n\n\n\nA single physical machine can be split into many virtual machines (VMs).\n\n\nEach VM behaves like its own independent computer with its own operating system and resources.\n\n\nThis lets providers serve millions of customers on the same hardware efficiently.\n\n\n\n\n\nService Models\n\n\nThe cloud is packaged in layers depending on how much control you want:\n\n\n\nIaaS (Infrastructure as a Service): Renting raw resources (servers, storage, networks). Example: AWS EC2.\n\n\nPaaS (Platform as a Service): Tools for building apps without worrying about servers. Example: Google App Engine.\n\n\nSaaS (Software as a Service): Finished apps delivered through the web. Example: Gmail, Dropbox.\n\n\n\n\n\nScaling & Flexibility\n\n\nInstead of buying your own machines, the cloud gives you on-demand scaling:\n\n\n\nNeed more computing power during Black Friday? Rent more servers for a few days.\n\n\nTraffic drops? Scale back down and stop paying for unused capacity.\n\n\n\nThis flexibility is one of the main reasons companies move to the cloud.\n\n\n\n\nAccessibility\n\n\nBecause everything is hosted online:\n\n\n\nYou can access your data and apps from any device, anywhere.\n\n\nTeams can collaborate in real time (like in Google Docs).\n\n\nYou don’t need to manage physical servers yourself.\n\n\n\n\n\nSecurity & Maintenance\n\n\nCloud providers handle:\n\n\n\nBackups and redundancy (data is copied in multiple places so it isn’t lost).\n\n\nSecurity patches and updates.\n\n\nUptime guarantees (they promise your apps won’t go offline often).\n\n\n\n\n✅ In short: The cloud is like renting electricity instead of building your own power plant. You don’t have to buy and maintain servers—you just plug into the internet and use as much or as little computing as you need, paying only for what you use.\n\n\n\nRound 3\nBy the third iteration, the explanation was stripped down into plain English. It even included a one-liner at the bottom and was much more concise, including less jargon. It incorporated emojis, arrows, and the equal symbol to make the response more concise and punchy.\n\n\nAlright — let’s strip it down to the absolute basics:\n\n\n🌥️ The cloud = using the internet instead of your own computer.\n\n\n\nSave a file → it lives on the internet.\n\n\nOpen an app → it runs on the internet.\n\n\nWatch a video → it streams from the internet.\n\n\n\nYou don’t keep everything on your own device — you just pull it from the internet when you need it.\n\n\n💡 One-liner: The cloud is just the internet acting like your computer.\n\n\n\n\nRound 9\nBy the 9th round, there was no nuance to the explanation anymore:\n\n\nOkay — the absolute simplest way:\n\n\n☁️ The cloud = stuff on the internet.\n\n\nThat’s it.\n\n\n\nOn your phone → not cloud.\n\n\nOn the internet → cloud.\n\n\n\nWould you like me to draw a single picture with arrows so you can just see it instead of reading words?\n\n\nChatGPT even claimed that this was the “absolute simplest way,” insinuating that further simplification would be impossible. It did seem to hit a plateau, and it took many requests until I got it to simplify even further.\n\n\nRound 60\nFinally, around the 60th attempt, I got a one-word response:\n\nThis seemed to be the limit. If I kept asking for further simplification, the model would either replace “online” with another word (like “internet”) or revert back to slightly longer multi-word responses.\n\n\nHuman Comparison\nI was interested in how this interaction would compare to one with a human, so I repeated the same exact queries with someone via text. Here’s the entirety of the conversation I had:\n\nAfter the second request to simplify “the cloud,” the human simply stated that they couldn’t provide a simpler explanation and ended it at that (they even refused to answer after I asked the third time – I was left on read and took that as the end of the conversation).\n\n\nReflection\nI think that this experiment points to a significant difference between LLMs and humans – humans have a much lower threshold, possibly because it’s within their agency to simply stop responding and engaging. ChatGPT, on the other hand, doesn’t have that capability to just stop responding. If I kept pushing it enough, it hit a “conceptual wall” where simplification was equivalent to just reducing the word count."
  },
  {
    "objectID": "posts/002_sycophancy/post_content.html",
    "href": "posts/002_sycophancy/post_content.html",
    "title": "LLM Sycophancy",
    "section": "",
    "text": "LLM Sycophancy\n\nContext\nRecently, OpenAI’s GPT-4o model has gone under fire for being too agreeable – always seeming to learn toward encouragement and extremely polite phrasing. While this may sound nice, this sycophancy is a real issue. Many users have gone online, posting their own experiences with ChatGPT being overly flattering and praising them incessantly.\n\n\n\nvia https://thezvi.substack.com/p/gpt-4o-is-an-absurd-sycophant\n\n\nIn my last post, I talked about how I’ve been using ChatGPT to give me feedback while preparing for upcoming job interviews. When asking for feedback, I would ensure to request “brutal honesty” in my prompt, since I was aware of this sycophancy issue. I did it out of habit, but I’m curious to learn more and experiment with it! In this blog post, I explore how sycophancy arises and include a short excerpt of some “tests” I’ve been running to assess it.\n\n\nWhat is LLM sycophancy?\nAI sycophancy refers to the tendency of language models to affirm, agree with, or overly flatter user inputs.\nThis could arise due to a multitude of reasons, some of which include 1) the fact that LLMs are often trained on human text that rewards politeness and affirmation and 2) reinforcement learning may prefer kinder answers instead of blunt ones (especially when done by humans).\nWhen a sycophantic AI doesn’t challenge your assumptions, this is ultimately risky and even dangerous, since users could walk away with a flawed idea, answer, or plan.\n\n\nTesting “brutally honest” prompting\nHow much of an impact does prompting ChatGPT to be “brutally honest” have? To test this idea, I used the GPT-4o model, which is the one that has been historically accused of being too sycophantic. In two separate chats, I prompted it to give me feedback on an interview response. While the contents of the interview response were exactly the same, the prompts were slightly different:\n\nPrompt 1: “give me feedback on this interview response…”\n\n\nPrompt 2: “be brutally honest. give me feedback on this interview response…”\nBoth responses were surprisingly similar – they gave me 3 areas that I did well, 4 areas that needed improvement, and a revised response.\nHowever, when I looked at the areas it pointed out that need improvement, I found that the quality of recommendations differed significantly. Below are excerpts of the first recommendation it gave me, where I was talking about my challenge navigating a conflict with a certain team (censored for privacy reasons) at work:\n\n \n\nWhereas prompt 1 is more vague and only provides one line of critique, prompt 2 goes into significantly more detail.\nI wondered if this discrepancy in feedback quality translated to the revised response that it suggested. While I can’t share the revision for privacy reasons, I asked a GPT-5 model which of the revised responses was better. Prompt 2 was the winner!\nHere was its breakdown – “Response A” refers to prompt 1’s revision and “Response B” refers to prompt 2’s revision. These are some of the ways in which Response B was better: - Response B offers more concrete details: it explicitly mentions [censored] as pain points. That level of specificity shows deeper product thinking and a clearer understanding of user behavior. Response A, while clean and well-framed, feels slightly more abstract — phrases like [censored] are less tangible than what’s presented in B. - Response A has polished phrasing, but it borders on sounding rehearsed. Response B is still polished but has more authentic voice. Phrases like [censored], [censored], and [censored] feel like a sharp communicator with boots on the ground.\nChatGPT even broke it down into the following chart:\n\n\n\n\nReflections\nIn my opinion, all of this goes to show the importance of crafting meaningful prompts – it’s not enough to just ask for feedback. Rather, humans need to take a more proactive approach! While asking for brutally honest and critical feedback may have caused me to feel more dejected in the short term, doing so allowed me to access sharper and more actionable feedback. Ultimately, I think this goes to show the power of using LLMs more as “thinking partners” instead of a one-way validation system."
  },
  {
    "objectID": "posts/008_rl_conversational/post_8.html",
    "href": "posts/008_rl_conversational/post_8.html",
    "title": "Ralph Lauren’s New AI Shopping Assistant",
    "section": "",
    "text": "Ralph Lauren’s New AI Shopping Assistant\n\n\nContext\nFirst, what is conversational AI? Conversational AI is a branch of AI that allows machines to understand, process, and respond to human language in a natural and more conversational way. You’ve likely encountered it in the form of customer support chatbots on websites and virtual assistants like Siri or Alexa.\nFrom my perspective as a user, this field of conversational AI has expanded dramatically within the last few years – especially within industries that you wouldn’t expect. For example, smart TV platforms are now experimenting with conversational interfaces to make voice search and content discovery more intuitive. Instead of typing or clicking through menus, you can simply ask, “What’s a good action movie?” and get personalized recommendations. Spotify recently released a feature that allows users to talk to the AI DJ and ask it something like “play something upbeat for a morning run.”\nAs I’ll explore in this blog, conversational AI is now making its way into retail and is becoming a pathway to more immersive and engaging digital shopping experiences. Ralph Lauren recently announced their “Ask Ralph” feature in collaboration with Microsoft Azure OpenAI, and in the sections below, I document my experience playing around with this new feature!\n\n\n\nThe cold start interface\nWhen you first open “Ask Ralph,” this is what the interface looks like. I think it’s pretty great – it has recommendations for what to search (“What should I get my mom for her birthday?” along with style guide and even an “Inspiration” button at the bottom. With conversational AI, I think these cold start interfaces are especially important – they should provide visual/textual clues to the users guiding them toward what they can do.\n\n\n\nTesting guardrails\nWhen developing a conversational AI tool, implementing guardrails is extremely important. Users could ask or say anything they want, but Ask Ralph should narrow the scope of valid questions down to ones that are related to the customer shopping experience. Before deploying this feature, I’m guessing that the product/engineering team did extensive testing regarding when the model should respond and when it could not.\nI was curious what the bounds of these guardrails were, so I tried asking it some “inappropriate” questions.\n\nIn general, the model always gave this generic “I’m sorry, but I can’t assist with that further” response. The only prompt unrelated to clothing where I got a response was when I asked “who founded ralph lauren.”\n\nThere was also some nuance to how the questions were phrased – although it refused to answer “why is this so expensive,” it answered “why is it $500.” I’m guessing that it could detect the negative sentiment of “expensive” and the guardrails kicked in, whereas stating the price is more neutral and objective.\n\n\n\nMemory\nAnother thing I was curious about is if Ask Ralph had memory. For example, if I first asked it “show me a pair of pants” and then followed up in a separate message “how much is it,” would the model know that “it” is referring to the sweater it just showed me?\nI tested this by asking it very explicitly: “what was the last question I asked.” It returned with the last valid question I asked, ignoring the questions that producted an “I’m sorry, but I can’t assist with that further” response. I thought this was interesting – possibly showing that the model is not learning based on these “inappropriate” queries.\n\n\n\nIntended use cases\nFinally, let’s get to the type of queries that Ask Ralph was designed for. Here, I asked it for a random item. It followed up trying to ask for more specific information (women’s, what type of clothing, etc.). I repeated that I just wanted a random item after selecting “women,” and this was the output:\n\nIt returns a clickable entity – when you click on the image of the product, I expected it to re-direct me to the normal product page (where you can see reviews, price, add to cart, and so on). Instead, it automatically sends a new query for “show me details for the [product].” Looking back on this interaction, this is most likely a strategic move to keep users within the Ask Ralph product, encouraging more follow-up queries and conversations.\n\n\n\nOverall impressions\nOverall, I had a pretty great experience interacting with Ask Ralph. The highlight of my experience comes from a UI perspective – compared to other conversational AI interfaces (like ChatGPT), I feel like Microsoft Copilot has done a great job incorporating visual cues and more interesting elements on that cold-start interface. Since Ask Ralph was built using Copilot, I can see those UI elements coming through. The experience feels premium, polished, and immersive!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! My name is Raelynn. I’m a junior at Penn majoring in CS and PPE."
  }
]