[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMM 4190 Blog",
    "section": "",
    "text": "UI Vibe Coding\n\n\n\nVibe Coding\n\nChatGPT\n\nClaude\n\nLovable\n\nUI/UX\n\n\n\nComparing UI replication abilities across ChatGPT, Claude, and Lovable\n\n\n\n\n\nSep 7, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nLLM Sycophancy\n\n\n\nLLMs\n\nChatGPT\n\n\n\nWhen ChatGPT tells you what you want to hear\n\n\n\n\n\nSep 6, 2025\n\n\nRaelynn Cui\n\n\n\n\n\n\n\n\n\n\n\n\nChatGPT as a Mock Interviewer\n\n\n\nLLMs\n\nChatGPT\n\nProfessional\n\n\n\nUsing AI to prepare for behavioral interviews\n\n\n\n\n\nSep 5, 2025\n\n\nRaelynn Cui\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/002_sycophancy/post_content.html",
    "href": "posts/002_sycophancy/post_content.html",
    "title": "LLM Sycophancy",
    "section": "",
    "text": "LLM Sycophancy\n\nContext\nRecently, OpenAI’s GPT-4o model has gone under fire for being too agreeable – always seeming to learn toward encouragement and extremely polite phrasing. While this may sound nice, this sycophancy is a real issue. Many users have gone online, posting their own experiences with ChatGPT being overly flattering and praising them incessantly.\n\n\n\nvia https://thezvi.substack.com/p/gpt-4o-is-an-absurd-sycophant\n\n\nIn my last post, I talked about how I’ve been using ChatGPT to give me feedback while preparing for upcoming job interviews. When asking for feedback, I would ensure to request “brutal honesty” in my prompt, since I was aware of this sycophancy issue. I did it out of habit, but I’m curious to learn more and experiment with it! In this blog post, I explore how sycophancy arises and include a short excerpt of some “tests” I’ve been running to assess it.\n\n\nWhat is LLM sycophancy?\nAI sycophancy refers to the tendency of language models to affirm, agree with, or overly flatter user inputs.\nThis could arise due to a multitude of reasons, some of which include 1) the fact that LLMs are often trained on human text that rewards politeness and affirmation and 2) reinforcement learning may prefer kinder answers instead of blunt ones (especially when done by humans).\nWhen a sycophantic AI doesn’t challenge your assumptions, this is ultimately risky and even dangerous, since users could walk away with a flawed idea, answer, or plan.\n\n\nTesting “brutally honest” prompting\nHow much of an impact does prompting ChatGPT to be “brutally honest” have? To test this idea, I used the GPT-4o model, which is the one that has been historically accused of being too sycophantic. In two separate chats, I prompted it to give me feedback on an interview response. While the contents of the interview response were exactly the same, the prompts were slightly different:\n\nPrompt 1: “give me feedback on this interview response…”\n\n\nPrompt 2: “be brutally honest. give me feedback on this interview response…”\nBoth responses were surprisingly similar – they gave me 3 areas that I did well, 4 areas that needed improvement, and a revised response.\nHowever, when I looked at the areas it pointed out that need improvement, I found that the quality of recommendations differed significantly. Below are excerpts of the first recommendation it gave me, where I was talking about my challenge navigating a conflict with a certain team (censored for privacy reasons) at work:\n\n \n\nWhereas prompt 1 is more vague and only provides one line of critique, prompt 2 goes into significantly more detail.\nI wondered if this discrepancy in feedback quality translated to the revised response that it suggested. While I can’t share the revision for privacy reasons, I asked a GPT-5 model which of the revised responses was better. Prompt 2 was the winner!\nHere was its breakdown – “Response A” refers to prompt 1’s revision and “Response B” refers to prompt 2’s revision. These are some of the ways in which Response B was better: - Response B offers more concrete details: it explicitly mentions [censored] as pain points. That level of specificity shows deeper product thinking and a clearer understanding of user behavior. Response A, while clean and well-framed, feels slightly more abstract — phrases like [censored] are less tangible than what’s presented in B. - Response A has polished phrasing, but it borders on sounding rehearsed. Response B is still polished but has more authentic voice. Phrases like [censored], [censored], and [censored] feel like a sharp communicator with boots on the ground.\nChatGPT even broke it down into the following chart:\n\n\n\n\nReflections\nIn my opinion, all of this goes to show the importance of crafting meaningful prompts – it’s not enough to just ask for feedback. Rather, humans need to take a more proactive approach! While asking for brutally honest and critical feedback may have caused me to feel more dejected in the short term, doing so allowed me to access sharper and more actionable feedback. Ultimately, I think this goes to show the power of using LLMs more as “thinking partners” instead of a one-way validation system."
  },
  {
    "objectID": "posts/001_mock_interview/post_content.html",
    "href": "posts/001_mock_interview/post_content.html",
    "title": "ChatGPT as a Mock Interviewer",
    "section": "",
    "text": "ChatGPT as a Mock Interviewer\n\nContext\nOver the past few weeks, I’ve been preparing for upcoming internship interviews! Many people suggest mock interviewing with others, but I feel bad asking someone to listen to me talk for so long and subjecting them to my rambles. Not only that, but I’ve found that rehearsing answers and practicing “in my head” are completely ineffective – when someone asks me a question in real time, I freeze up and don’t know what to say.\nSo, I turned to ChatGPT as a prep partner, using it as a coach, mock interviewer, and critic!\n\n\n\nChatGPT voice feature\n\n\n\nI used ChatGPT across all areas of interview preparation: coming up with answers, verbally delivering the answers, and receiving feedback. This blog outlines how LLMs assisted me across all these stages!\n\n\n\nStage 1: Answers\nTo optimize the feedback that ChatGPT gave me on behavioral questions (“Tell me about a time when you led a team,” “Tell me about a time when you failed”), I needed to provide it with extensive context on my previous experiences. To do this, I uploaded two files to my project folder: 1) my resume and 2) a longer, more narrative-driven document, where I keep a running log of the details and lessons I’ve learned from my previous experiences.\nBy giving ChatGPT this context, I was even able to ask it to “read between the lines” my experiences to extract core themes that could be applied to any behavioral question. In fact, this was the most useful aspect of using an LLM to prepare for behavioral questions – with the right prompting, it could even point out patterns in my experiences that I hadn’t noticed before!\n\n\n\nContextual documents given to ChatGPT\n\n\n\n\nStage 2: Verbal Delivery\nTo practice verbally delivering my answers, I made use of ChatGPT’s voice feature. I provided it with a bank of questions and then prompted it to act like an interviewer and choose one at random. In this stage, it wasn’t much about what ChatGPT could say to me – it was most useful in creating a space to simulate the surprise of getting a question at random and having to answer it on the spot.\n\n\nStage 3: Feedback\nPrevious versions of ChatGPT (GPT-4o) have been accused of being too sycophantic – being overly flattering and agreeable to the user. While this attribute has been claimed to be addressed in the GPT-5 update, which is what I was using, I still always made sure to prompt the model to be “brutally honest.” Doing so forced the LLM to give more critical feedback on my response, which is where the real improvement in my responses was made! Additionally, prompting ChatGPT to “act as a product director” and “apply best frameworks and relevant practices” (since I was interviewing for product management roles) produced extremely good results.\n\n\n\nReflections\nUtilizing ChatGPT was an incredibly valuable part of my interview preparation. Psychologically, it was great to have a low-stakes and always readily available “interviewer” – when walking in between classes, I could simply pull out my phone and do a quick mock question. This experience has shown me the importance of 1) providing an LLM with the correct context and 2) crafting the correct prompts for my specific use case. If I hadn’t provided ChatGPT with the extensive accounts of my previous experiences (many of which I forget or can’t recall the details of off the top of my head), it would not have been able to provide as nuanced suggestions and revisions. Additionally, if I had not prompted it to be brutally honest, it may have only provided vapid and flattering feedback (which makes me feel good in the moment, but doesn’t help with improvement).\nAs I’m writing this, I actually just completed two interviews that I was using these methods with ChatGPT to prepare me for! Upon reflection, there was a sense of randomness and interviewer-dependent context that I couldn’t have prepared for with an LLM. For example, many questions were not framed in a way where I could immediately jump into a STAR framework response or a product design framework response. In this sense, ChatGPT turned out to be most helpful for extracting core themes from my experiences and being able to communicate these concisely with phrases that I could weave throughout my interview conversations."
  },
  {
    "objectID": "posts/003_UI_vibe_coding/post_3.html",
    "href": "posts/003_UI_vibe_coding/post_3.html",
    "title": "UI Vibe Coding",
    "section": "",
    "text": "UI Vibe Coding\n\nContext\nIn the past, I’ve experimented a bit with vibe coding by having ChatGPT assist me with things like writing a script to automate the downloading of images from HTML, writing a script to parse through a JSON to extract certain fields, and writing a Python script to extract numerical data from a line graph image using edge detection software.\n\nVibe coding: an emerging software development approach in which a human developer directs an AI system through high-level, natural language instructions and iterative feedback, while the AI handles the generation, refinement, and debugging of the code..\n\nHowever, I’ve never used AI models to vibe code UIs! As a lover of UI/UX design, I’ve historically stuck to Figma to manually prototype my designs. In this blog post, I document my experience using three different AI tools to generate mockups of my Figma designs in HTML/CSS – Claude, ChatGPT, and Lovable! For this exercise, I’m not prompting these models to create functioning and clickable prototypes – just the UI.\n\n\n\nThe Prompt & Thinking\n\n\n\n\n\nMy Figma mockup\n\n\n\n\n\n\nLovable’s thinking\n\n\n\n\nFor each of the models, I prompted it to “replicate this mobile UI using html/css,” with this image my Figma mockup attached.\nThe models notably differed in how they responded to the prompts: - ChatGPT thought for 9 seconds, with one of its lines of reasoning being: “I’m planning to create a full HTML/CSS layout with a mobile-friendly design (390x844). It will have top tabs for”tasks” and “calendar” in pill shapes with navy and tan colors. The bottom bar will feature icons like emoji/SVG. For tasks, I’ll create cards with checkboxes, names, due dates, and avatars. We’ll use specific color variables like navy blue #2F3A8C and others for consistency in design.” - Lovable thought for 19 seconds, with an even more extensive line of reasoning (see photo above). I found that this more modular and detailed reasoning produced a significantly better outcome, which I describe in the next section.\n\n\n\nOutputs\n\n\n&lt;img src=\"chatgptop.png\" alt=\"ChatGPT's output\"\n     style=\"display: block; height: auto; width: 1000px; border-radius: 8px;\"&gt;\n\n\n&lt;h3&gt;ChatGPT&lt;/h3&gt;\n&lt;p&gt;\n  Overall, ChatGPT's output was pretty good. It captured the color scheme relatively well,\n  but not perfectly (some inconsistencies with the horizontal bars). It also maintained the\n  basic layout: tabs at the top, a horizontal navigation bar at the bottom, and horizontal\n  bars with a checkable box and text. I found it interesting that it even replaced the\n  avatar images with emojis that still resembled the people!\n&lt;/p&gt;\n\n\n\n\n\n&lt;img src=\"chatgptop.png\" alt=\"ChatGPT's output\" style=\"width:800px; border-radius:8px;\"&gt;\n\n\n\n&lt;h3&gt;ChatGPT&lt;/h3&gt;\n&lt;p&gt;\n  Overall, ChatGPT's output was pretty good. It captured the color scheme relatively well,\n  but not perfectly (some inconsistencies with the horizontal bars). It also maintained the\n  basic layout: tabs at the top, a horizontal navigation bar at the bottom, and horizontal\n  bars with a checkable box and text. I found it interesting that it even replaced the\n  avatar images with emojis that still resembled the people!\n&lt;/p&gt;\n\n\n\n\n\n&lt;img src=\"claudeop.png\" alt=\"Claude's output\"\n     style=\"display: block; height: auto; width: 900px; border-radius: 8px;\"&gt;\n\n\n\n&lt;h3&gt;Claude&lt;/h3&gt;\n&lt;p&gt;\n  Claude's output was also decent, but not as great as ChatGPT's, in my opinion. The color scheme was not as accurate, but it did handle the shape of the top \"tasks\" and \"calendar\" tabs better than GPT. However, it added some features that weren't present in the Figma mockup I provided -- gradients behind the avatars and strikethroughs for the completed tasks.  \n\n\n\n\n\n&lt;img src=\"lovableop.png\" alt=\"Lovable's output\"\n     style=\"display: block; width: 900px; height: auto; border-radius: 8px;\"&gt;\n\n\n\n&lt;img src=\"prototype.gif\" alt=\"Lovable prototype demo\"\n     style=\"display: block; width: 900px; height: auto; border-radius: 8px;\"&gt;\n\n\n\n&lt;h3&gt;Lovable&lt;/h3&gt;\n&lt;p&gt;\n  Lovable's output was underwhelming at first -- the color scheme looks different and the top tab navigation is off as well. \n  However, when you interact with the prototype, it outperforms ChatGPT and Claude by far. Even though I didn't prompt it to include these functionalities, it allows you to check (and uncheck!) tasks, toggle between the tasks and calendar page, and click the \"add task\" button.\n&lt;/p&gt;\n\n\n\n\nReflections\nFor UI accuracy (text, colors, layout), I think ChatGPT performed the best. However, for functionality, Lovable was superior, which is reflective of its much longer and more thorough “thinking” process. Whereas ChatGPT took 9 seconds to seemingly generate the prototype in one shot, Lovable took 19 seconds, working step by step through each component of the interface. Overall, I think this goes to show the importance of playing around with different models to determine which supports your needs the most! In the future, I think it would be interesting to play around with building a functioning app isntead of one static interface."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! My name is Raelynn. I’m a junior at Penn majoring in CS and PPE."
  }
]